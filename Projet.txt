# üèóÔ∏è Architecture Multi-MCP Servers + n8n + Ollama

## üìä Analyse de vos outils et d√©pendances

### Outils SANS d√©pendances externes (Autonomes) ‚úÖ

Ces outils peuvent √™tre cr√©√©s **MAINTENANT** sans attendre d'infos externes :

| Outil | D√©pendances | Complexit√© |
|-------|-------------|-----------|
| **snippet_library** | Fichiers JSON locaux | ‚≠ê Facile |
| **meme_generator** | Fichiers images locaux | ‚≠ê Facile |
| **motivation_bot** | Phrases hardcod√©es | ‚≠ê Facile |
| **study_buddy** | Timer + Quiz hardcod√©s | ‚≠ê‚≠ê Moyen |
| **code_challenge** | Probl√®mes hardcod√©s | ‚≠ê‚≠ê Moyen |
| **debug_helper** | Base de connaissance locale | ‚≠ê‚≠ê Moyen |

**Action** : Commencez par ceux-l√† ce soir ! ‚úÖ

---

### Outils AVEC d√©pendances externes (N√©cessitent des ressources) üîó

| Outil | Ressource externe requise | Quand disponible ? |
|-------|--------------------------|-------------------|
| **wiki_search** | API Wiki du d√©partement | Demain (apr√®s exploration) |
| **course_info** | Base de donn√©es cours | √Ä obtenir |
| **assignment_tracker** | Syst√®me de gestion devoirs | √Ä obtenir |
| **resource_finder** | Sources √† indexer | √Ä cr√©er |
| **code_analyzer** | Linters (pylint, eslint) | Imm√©diat (npm install) |
| **code_executor** | Sandbox Docker | Imm√©diat (Docker in Docker) |
| **calendar_helper** | Google Calendar API / iCal | √Ä obtenir acc√®s |

**Action** : Cr√©ez des versions "mock" (simul√©es) d'abord, vraies donn√©es plus tard ‚úÖ

---

## üéØ Pourquoi une base de donn√©es ?

### Sans base de donn√©es (OK pour MVP) ‚úÖ
```
- Outils autonomes (jokes, memes)
- Donn√©es statiques (snippets)
- Pas d'historique n√©cessaire
```

### Avec base de donn√©es (N√©cessaire pour) üìä
```
‚úÖ Historique des conversations
‚úÖ Tracking des devoirs (assignment_tracker)
‚úÖ Progression √©tudiant (study_buddy)
‚úÖ Statistiques d'utilisation
‚úÖ Cache des r√©sultats
‚úÖ Feedback utilisateurs
```

**Ma recommandation** :
- **Phase 1 (maintenant)** : Pas de DB, fichiers JSON
- **Phase 2 (semaine 2-3)** : SQLite simple
- **Phase 3 (production)** : PostgreSQL si vraiment n√©cessaire

---

## üèóÔ∏è Architecture recommand√©e : Multi-MCP Servers

### Structure propos√©e

```
tech-assistant-mcp/
‚îú‚îÄ‚îÄ docker-compose.yml (MASTER)
‚îú‚îÄ‚îÄ registry.yaml
‚îÇ
‚îú‚îÄ‚îÄ mcp-servers/
‚îÇ   ‚îú‚îÄ‚îÄ 1-autonomous-tools/      # Outils sans d√©pendances
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ snippet-library.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ meme-generator.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ motivation-bot.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ study-buddy.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ catalog.yaml
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ 2-code-tools/            # Outils de code
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ code-analyzer.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ code-executor.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ debug-helper.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ code-challenge.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ catalog.yaml
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ 3-academic-tools/        # Outils acad√©miques (avec d√©pendances)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ wiki-search.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ course-info.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ assignment-tracker.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ calendar-helper.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ catalog.yaml
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ .env.example         # Pour les cl√©s API
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ 4-resource-tools/        # Outils de ressources
‚îÇ       ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ       ‚îú‚îÄ‚îÄ src/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ resource-finder.ts
‚îÇ       ‚îî‚îÄ‚îÄ catalog.yaml
‚îÇ
‚îú‚îÄ‚îÄ n8n-integration/             # Workflows n8n
‚îÇ   ‚îî‚îÄ‚îÄ workflows/
‚îÇ       ‚îú‚îÄ‚îÄ chat-workflow.json
‚îÇ       ‚îú‚îÄ‚îÄ monitoring.json
‚îÇ       ‚îî‚îÄ‚îÄ notifications.json
‚îÇ
‚îî‚îÄ‚îÄ data/                        # Donn√©es locales
    ‚îú‚îÄ‚îÄ snippets/
    ‚îú‚îÄ‚îÄ memes/
    ‚îú‚îÄ‚îÄ challenges/
    ‚îî‚îÄ‚îÄ mock-data/               # Donn√©es simul√©es
```

---

## üê≥ Docker Compose Master (tous les MCP + n8n)

```yaml
version: '3.8'

services:
  # ==========================================
  # MCP SERVERS
  # ==========================================
  
  mcp-autonomous:
    build:
      context: ./mcp-servers/1-autonomous-tools
      dockerfile: Dockerfile
    container_name: mcp-autonomous
    volumes:
      - ./data/snippets:/app/data/snippets:ro
      - ./data/memes:/app/data/memes:ro
      - C:\Users\HP PAVILION\.docker\mcp\registry.yaml:/mcp/registry.yaml:ro
      - C:\Users\HP PAVILION\.docker\mcp\catalogs:/mcp/catalogs:ro
    environment:
      - NODE_ENV=production
    networks:
      - mcp-network
    restart: unless-stopped

  mcp-code-tools:
    build:
      context: ./mcp-servers/2-code-tools
      dockerfile: Dockerfile
    container_name: mcp-code-tools
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Pour code executor
      - C:\Users\HP PAVILION\.docker\mcp\registry.yaml:/mcp/registry.yaml:ro
      - C:\Users\HP PAVILION\.docker\mcp\catalogs:/mcp/catalogs:ro
    environment:
      - NODE_ENV=production
    privileged: true  # Pour Docker in Docker
    networks:
      - mcp-network
    restart: unless-stopped

  mcp-academic:
    build:
      context: ./mcp-servers/3-academic-tools
      dockerfile: Dockerfile
    container_name: mcp-academic
    volumes:
      - C:\Users\HP PAVILION\.docker\mcp\registry.yaml:/mcp/registry.yaml:ro
      - C:\Users\HP PAVILION\.docker\mcp\catalogs:/mcp/catalogs:ro
      - ./data/mock-data:/app/data/mock:ro  # Donn√©es simul√©es
    environment:
      - NODE_ENV=production
      - WIKI_API_URL=${WIKI_API_URL:-http://mock}
      - CALENDAR_API_KEY=${CALENDAR_API_KEY:-mock}
    env_file:
      - ./mcp-servers/3-academic-tools/.env
    networks:
      - mcp-network
    restart: unless-stopped

  mcp-resources:
    build:
      context: ./mcp-servers/4-resource-tools
      dockerfile: Dockerfile
    container_name: mcp-resources
    volumes:
      - C:\Users\HP PAVILION\.docker\mcp\registry.yaml:/mcp/registry.yaml:ro
      - C:\Users\HP PAVILION\.docker\mcp\catalogs:/mcp/catalogs:ro
    environment:
      - NODE_ENV=production
    networks:
      - mcp-network
    restart: unless-stopped

  # ==========================================
  # N8N + OLLAMA (depuis votre starter kit)
  # ==========================================
  
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - mcp-network
    restart: unless-stopped

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=America/New_York
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n-integration/workflows:/workflows
    depends_on:
      - postgres
      - ollama
    networks:
      - mcp-network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: n8n
      POSTGRES_PASSWORD: n8n
      POSTGRES_DB: n8n
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mcp-network
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - mcp-network
    restart: unless-stopped

networks:
  mcp-network:
    driver: bridge

volumes:
  ollama_data:
  n8n_data:
  postgres_data:
  qdrant_data:
```

---

## üìù Registry.yaml (r√©f√©rencer tous les MCP)

```yaml
# C:\Users\HP PAVILION\.docker\mcp\registry.yaml
version: "1.0"
catalogs:
  - name: autonomous-tools
    path: /mcp/catalogs/autonomous-catalog.yaml
    description: "Outils autonomes (snippets, memes, motivation)"
    enabled: true
    
  - name: code-tools
    path: /mcp/catalogs/code-catalog.yaml
    description: "Outils de d√©veloppement (analyzer, executor)"
    enabled: true
    
  - name: academic-tools
    path: /mcp/catalogs/academic-catalog.yaml
    description: "Outils acad√©miques (wiki, cours, devoirs)"
    enabled: true
    
  - name: resource-tools
    path: /mcp/catalogs/resource-catalog.yaml
    description: "Recherche de ressources p√©dagogiques"
    enabled: true
```

---

## üîå Connexion MCP ‚Üî n8n

### Option 1 : Via HTTP (Recommand√©)

Cr√©ez une API wrapper pour vos MCP :

```typescript
// api-gateway/src/index.ts
import express from 'express';
import { execMCP } from './mcp-client';

const app = express();
app.use(express.json());

// Endpoint pour n8n
app.post('/mcp/execute', async (req, res) => {
    const { server, tool, args } = req.body;
    
    try {
        const result = await execMCP(server, tool, args);
        res.json({ success: true, result });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

app.listen(3000, () => {
    console.log('MCP Gateway API listening on :3000');
});
```

Ajoutez au docker-compose :

```yaml
  mcp-gateway-api:
    build:
      context: ./api-gateway
    container_name: mcp-gateway-api
    ports:
      - "3000:3000"
    environment:
      - MCP_SERVERS=mcp-autonomous,mcp-code-tools,mcp-academic,mcp-resources
    networks:
      - mcp-network
    depends_on:
      - mcp-autonomous
      - mcp-code-tools
      - mcp-academic
      - mcp-resources
```

### Option 2 : n8n Custom Node (Avanc√©)

Cr√©ez un node n8n personnalis√© pour MCP :

```typescript
// n8n-nodes-mcp/nodes/MCPTool/MCPTool.node.ts
import { IExecuteFunctions } from 'n8n-core';
import { INodeExecutionData, INodeType, INodeTypeDescription } from 'n8n-workflow';
import axios from 'axios';

export class MCPTool implements INodeType {
    description: INodeTypeDescription = {
        displayName: 'MCP Tool',
        name: 'mcpTool',
        group: ['transform'],
        version: 1,
        description: 'Execute MCP Server tools',
        defaults: {
            name: 'MCP Tool',
        },
        inputs: ['main'],
        outputs: ['main'],
        properties: [
            {
                displayName: 'Server',
                name: 'server',
                type: 'options',
                options: [
                    { name: 'Autonomous Tools', value: 'autonomous' },
                    { name: 'Code Tools', value: 'code' },
                    { name: 'Academic Tools', value: 'academic' },
                    { name: 'Resource Tools', value: 'resources' },
                ],
                default: 'autonomous',
            },
            {
                displayName: 'Tool',
                name: 'tool',
                type: 'string',
                default: '',
            },
            {
                displayName: 'Arguments',
                name: 'args',
                type: 'json',
                default: '{}',
            },
        ],
    };

    async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
        const items = this.getInputData();
        const returnData: INodeExecutionData[] = [];

        for (let i = 0; i < items.length; i++) {
            const server = this.getNodeParameter('server', i) as string;
            const tool = this.getNodeParameter('tool', i) as string;
            const args = this.getNodeParameter('args', i) as object;

            const response = await axios.post('http://mcp-gateway-api:3000/mcp/execute', {
                server,
                tool,
                args,
            });

            returnData.push({ json: response.data });
        }

        return [returnData];
    }
}
```

---

## üé¨ Workflow n8n exemple

```json
{
  "name": "Student Question Handler",
  "nodes": [
    {
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "position": [250, 300],
      "parameters": {
        "path": "student-question",
        "method": "POST"
      }
    },
    {
      "name": "Detect Intent",
      "type": "n8n-nodes-base.httpRequest",
      "position": [450, 300],
      "parameters": {
        "url": "http://ollama:11434/api/generate",
        "method": "POST",
        "bodyParametersJson": "={{ JSON.stringify({\n  model: 'llama3.2',\n  prompt: 'Classify this question: ' + $json.question\n}) }}"
      }
    },
    {
      "name": "Router",
      "type": "n8n-nodes-base.switch",
      "position": [650, 300],
      "parameters": {
        "rules": [
          { "name": "Code Question", "value": "={{ $json.intent === 'code' }}" },
          { "name": "Course Question", "value": "={{ $json.intent === 'course' }}" },
          { "name": "General", "value": "={{ $json.intent === 'general' }}" }
        ]
      }
    },
    {
      "name": "Call Code Tools",
      "type": "mcpTool",
      "position": [850, 200],
      "parameters": {
        "server": "code",
        "tool": "code_analyzer",
        "args": "={{ $json.code }}"
      }
    },
    {
      "name": "Call Academic Tools",
      "type": "mcpTool",
      "position": [850, 300],
      "parameters": {
        "server": "academic",
        "tool": "wiki_search",
        "args": "={{ { query: $json.question } }}"
      }
    },
    {
      "name": "Generate Response",
      "type": "n8n-nodes-base.httpRequest",
      "position": [1050, 300],
      "parameters": {
        "url": "http://ollama:11434/api/generate",
        "method": "POST",
        "bodyParametersJson": "={{ JSON.stringify({\n  model: 'llama3.2',\n  prompt: 'Context: ' + $json.result + '\\n\\nQuestion: ' + $('Webhook').item.json.question\n}) }}"
      }
    },
    {
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [1250, 300],
      "parameters": {
        "response": "={{ $json.response }}"
      }
    }
  ],
  "connections": {
    "Webhook": { "main": [[{ "node": "Detect Intent", "type": "main", "index": 0 }]] },
    "Detect Intent": { "main": [[{ "node": "Router", "type": "main", "index": 0 }]] },
    "Router": {
      "main": [
        [{ "node": "Call Code Tools", "type": "main", "index": 0 }],
        [{ "node": "Call Academic Tools", "type": "main", "index": 0 }],
        [{ "node": "Generate Response", "type": "main", "index": 0 }]
      ]
    },
    "Call Code Tools": { "main": [[{ "node": "Generate Response", "type": "main", "index": 0 }]] },
    "Call Academic Tools": { "main": [[{ "node": "Generate Response", "type": "main", "index": 0 }]] },
    "Generate Response": { "main": [[{ "node": "Send Response", "type": "main", "index": 0 }]] }
  }
}
```

---

## üöÄ Plan d'action CE SOIR (4 heures)

### Phase 1 : Restructurer le projet (30 min)

```bash
cd tech-assistant-mcp

# Cr√©er la nouvelle structure
mkdir -p mcp-servers/{1-autonomous-tools,2-code-tools,3-academic-tools,4-resource-tools}/src
mkdir -p n8n-integration/workflows
mkdir -p data/{snippets,memes,challenges,mock-data}
mkdir -p api-gateway/src

# Copier votre serveur existant comme base
cp -r src mcp-servers/1-autonomous-tools/
cp package.json mcp-servers/1-autonomous-tools/
cp tsconfig.json mcp-servers/1-autonomous-tools/
cp Dockerfile mcp-servers/1-autonomous-tools/
```

### Phase 2 : MCP Autonomous Tools (2h30)

```bash
cd mcp-servers/1-autonomous-tools

# Impl√©menter les 4 outils autonomes
# snippet_library.ts
# meme_generator.ts  
# motivation_bot.ts
# study_buddy.ts

npm install
npm run build
```

### Phase 3 : Tester avec Claude Desktop (30 min)

```bash
# Mettre √† jour le registry
# Rebuild docker
docker-compose build mcp-autonomous
docker-compose up -d mcp-autonomous

# Tester dans Claude Desktop
```

### Phase 4 : Documenter (30 min)

```bash
# Cr√©er README pour chaque serveur
# Noter ce qui fonctionne
# Lister les d√©pendances manquantes
```

---

## üìä Priorit√©s et Timeline

### Ce soir (23h-3h) - 4h
- ‚úÖ Restructurer projet
- ‚úÖ MCP Autonomous Tools (4 outils)
- ‚úÖ Tests Claude Desktop

### Demain soir - 3h
- ‚úÖ Explorer wiki d√©partement
- ‚úÖ MCP Code Tools (commencer)
- ‚úÖ Cr√©er donn√©es mock pour academic tools

### Jour 3-4 - 6h
- ‚úÖ MCP Code Tools complet
- ‚úÖ MCP Academic Tools (version mock)
- ‚úÖ API Gateway basique

### Jour 5-7 - 8h
- ‚úÖ Int√©gration n8n
- ‚úÖ Workflow de base
- ‚úÖ Tests end-to-end

### Semaine 2
- ‚úÖ Remplacer mocks par vraies donn√©es
- ‚úÖ Interface web simple
- ‚úÖ D√©ploiement

---

## üéØ R√©ponse √† votre configuration Claude Desktop

Votre config actuelle est **parfaite** ! Pour ajouter les nouveaux serveurs MCP :

```json
{
  "mcpServers": {
    "autonomous-tools": {
      "command": "docker",
      "args": [
        "run", "-i", "--rm",
        "-v", "C:\\Users\\HP PAVILION\\.docker\\mcp\\registry.yaml:/mcp/registry.yaml:ro",
        "-v", "C:\\Users\\HP PAVILION\\.docker\\mcp\\catalogs:/mcp/catalogs:ro",
        "mcp-autonomous"
      ]
    },
    "code-tools": {
      "command": "docker",
      "args": [
        "run", "-i", "--rm",
        "-v", "C:\\Users\\HP PAVILION\\.docker\\mcp\\registry.yaml:/mcp/registry.yaml:ro",
        "-v", "C:\\Users\\HP PAVILION\\.docker\\mcp\\catalogs:/mcp/catalogs:ro",
        "-v", "/var/run/docker.sock:/var/run/docker.sock",
        "--privileged",
        "mcp-code-tools"
      ]
    },
    "academic-tools": {
      "command": "docker",
      "args": [
        "run", "-i", "--rm",
        "-v", "C:\\Users\\HP PAVILION\\.docker\\mcp\\registry.yaml:/mcp/registry.yaml:ro",
        "-v", "C:\\Users\\HP PAVILION\\.docker\\mcp\\catalogs:/mcp/catalogs:ro",
        "mcp-academic"
      ]
    }
  }
}
```

---

## üí° Mes suggestions finales

### 1. **Commencez SIMPLE ce soir**
Cr√©ez juste le serveur `autonomous-tools` avec 4 outils. C'est faisable en 4h.

### 2. **Donn√©es mock d'abord**
Pour `academic-tools`, cr√©ez des fichiers JSON avec des donn√©es fictives :
```json
// data/mock-data/courses.json
{
  "Python 101": {
    "schedule": "Lundi 9h-11h",
    "professor": "Dr. Smith",
    "room": "A-301"
  }
}
```

### 3. **n8n en Phase 2**
Concentrez-vous sur les MCP cette semaine. n8n la semaine prochaine quand tout est stable.

### 4. **API Gateway = cl√©**
C'est le pont entre n8n et vos MCP. Priorit√© semaine 2.

### 5. **Documentation continue**
Documentez TOUT au fur et √† mesure. Vous oublierez sinon.

---

## ‚ùì Questions critiques √† r√©soudre demain

1. **Wiki** : Quel CMS ? (MediaWiki, Confluence, custom ?)
2. **Cours** : O√π sont les donn√©es acad√©miques ?
3. **Devoirs** : Syst√®me existant ou √† cr√©er ?
4. **Calendrier** : Google Calendar ou autre ?

---

**Pr√™t √† commencer ? Commencez par cr√©er `snippet-library.ts` ce soir ! C'est le plus simple. üöÄ**

Besoin du code de d√©marrage pour les outils autonomes ?