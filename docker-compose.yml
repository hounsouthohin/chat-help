services:
  # === MCP SERVER HTTP (pour n8n) ===
  chat-help-mcp:
    build: .
    image: chat-help-mcp
    container_name: chat-help-mcp
    hostname: chat-help-mcp  # ← AJOUT pour meilleure résolution DNS
    networks:
      - demo
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./data:/app/data
    environment:
      - PYTHONUNBUFFERED=1
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8080
      - SEARXNG_URL=http://searxng:8080
      - MINIFLUX_URL=http://miniflux:8080
    command: python server.py  # ← SUPPRESSION du --http (mode par défaut)
    healthcheck:  # ← AJOUT (utilise curl ou python)
      test: ["CMD-SHELL", "python -c 'import urllib.request; urllib.request.urlopen(\"http://localhost:8080/health\")' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  # === POSTGRES ===
  postgres:
    image: postgres:16-alpine
    container_name: chat-help-postgres
    hostname: postgres  # ← AJOUT
    networks:
      - demo
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-n8n}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-n8n}
      - POSTGRES_DB=${POSTGRES_DB:-n8n}
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-n8n}']
      interval: 5s
      timeout: 5s
      retries: 10

  # === N8N ===
  n8n:
    image: n8nio/n8n:latest
    container_name: chat-help-n8n
    hostname: n8n  # ← AJOUT
    networks:
      - demo
    restart: unless-stopped
    ports:
      - "5678:5678"
    volumes:
      - n8n_storage:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
      chat-help-mcp:  # ← AJOUT dépendance vers MCP
        condition: service_healthy
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-n8n}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-n8n}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-somekey}
      - OLLAMA_HOST=ollama:11434
      # Optimisations pour MCP/SSE
      - N8N_SKIP_RESPONSE_COMPRESSION=true
      - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true

  # === AUTRES SERVICES ===
  qdrant:
    image: qdrant/qdrant
    container_name: chat-help-qdrant
    hostname: qdrant  # ← AJOUT
    networks:
      - demo
    restart: unless-stopped
    ports:
      - "6333:6333"
    volumes:
      - qdrant_storage:/qdrant/storage

  ollama:
    image: ollama/ollama:latest
    container_name: chat-help-ollama
    hostname: ollama  # ← AJOUT
    networks:
      - demo
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_storage:/root/.ollama

  searxng:
    image: searxng/searxng:latest
    container_name: chat-help-searxng
    hostname: searxng  # ← AJOUT
    networks:
      - demo
    restart: unless-stopped
    ports:
      - "8081:8080"
    volumes:
      - ./searxng:/etc/searxng

  miniflux-db:
    image: postgres:15-alpine
    container_name: chat-help-miniflux-db
    hostname: miniflux-db  # ← AJOUT
    networks:
      - demo
    restart: unless-stopped
    environment:
      - POSTGRES_USER=miniflux
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=miniflux
    volumes:
      - miniflux_db:/var/lib/postgresql/data

  miniflux:
    image: miniflux/miniflux:latest
    container_name: chat-help-miniflux
    hostname: miniflux  # ← AJOUT
    networks:
      - demo
    restart: unless-stopped
    ports:
      - "8082:8080"
    depends_on:
      - miniflux-db
    environment:
      - DATABASE_URL=postgres://miniflux:secret@miniflux-db/miniflux?sslmode=disable
      - RUN_MIGRATIONS=1
      - CREATE_ADMIN=1
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD=admin123

volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  miniflux_db:

networks:
  demo:
    name: chat-help_demo
    driver: bridge  # ← AJOUT explicite