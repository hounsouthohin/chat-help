"""
Outils d'apprentissage et d'aide au d√©veloppement
"""

from typing import Dict, Any
import re

async def explain_concept(concept: str, level: str = "intermediaire") -> Dict[str, Any]:
    """
    Explique un concept informatique de mani√®re p√©dagogique
    """
    
    # Base de connaissances simplifi√©e (peut √™tre √©tendue)
    explanations = {
        "r√©cursivit√©": {
            "debutant": "Une fonction qui s'appelle elle-m√™me. Comme des poup√©es russes!",
            "intermediaire": "Une technique o√π une fonction r√©sout un probl√®me en se rappelant elle-m√™me avec des param√®tres diff√©rents, jusqu'√† atteindre un cas de base.",
            "avance": "Paradigme algorithmique utilisant la pile d'appels pour r√©soudre des probl√®mes divisibles en sous-probl√®mes similaires. Complexit√© spatiale O(n) due √† la pile."
        },
        "pointeurs": {
            "debutant": "Une variable qui contient l'adresse m√©moire d'une autre variable.",
            "intermediaire": "R√©f√©rence √† un emplacement m√©moire permettant l'acc√®s indirect aux donn√©es et la manipulation de structures dynamiques.",
            "avance": "Abstraction du mod√®le m√©moire permettant l'arithm√©tique de pointeurs, l'allocation dynamique et l'impl√©mentation de structures de donn√©es complexes."
        }
    }
    
    concept_lower = concept.lower()
    
    # Recherche de correspondances partielles
    matched_concept = None
    for key in explanations.keys():
        if key in concept_lower or concept_lower in key:
            matched_concept = key
            break
    
    if matched_concept:
        return {
            "success": True,
            "concept": concept,
            "level": level,
            "explanation": explanations[matched_concept].get(level, explanations[matched_concept]["intermediaire"]),
            "suggestion": "üí° Pour approfondir, consultez le wiki ou demandez des exemples de code!"
        }
    else:
        return {
            "success": True,
            "concept": concept,
            "level": level,
            "explanation": f"Le concept '{concept}' n√©cessite une recherche plus approfondie.",
            "suggestions": [
                "Recherchez ce concept dans le wiki",
                "Consultez la documentation officielle",
                "Demandez des exemples de code sp√©cifiques"
            ],
            "note": "üí° Je peux mieux expliquer: r√©cursivit√©, pointeurs, classes, h√©ritage, polymorphisme, TCP/IP, etc."
        }

async def analyze_code(code: str, language: str) -> Dict[str, Any]:
    """
    Analyse du code avec suggestions d'am√©lioration
    """
    
    analysis = {
        "success": True,
        "language": language,
        "code_length": len(code),
        "lines": len(code.split('\n')),
        "issues": [],
        "suggestions": [],
        "good_practices": []
    }
    
    # Analyses basiques par langage
    if language == "python":
        # V√©rifier l'indentation
        if '\t' in code:
            analysis["issues"].append("‚ö†Ô∏è Utilisation de tabulations d√©tect√©e. PEP 8 recommande 4 espaces.")
        
        # V√©rifier les conventions de nommage
        if re.search(r'\bdef [A-Z]', code):
            analysis["issues"].append("‚ö†Ô∏è Les fonctions Python devraient utiliser snake_case (minuscules avec underscores).")
        
        # Bonnes pratiques
        if 'def ' in code and '"""' not in code and "'''" not in code:
            analysis["suggestions"].append("üí° Ajoutez des docstrings √† vos fonctions pour une meilleure documentation.")
        
        analysis["good_practices"].extend([
            "Utilisez des noms de variables descriptifs",
            "Limitez la longueur des fonctions (max 20-30 lignes)",
            "Utilisez les list comprehensions pour plus de concision"
        ])
    
    elif language == "java":
        if not re.search(r'public class \w+', code):
            analysis["issues"].append("‚ö†Ô∏è Assurez-vous que votre classe est correctement d√©clar√©e.")
        
        analysis["good_practices"].extend([
            "Suivez la convention CamelCase pour les classes",
            "Utilisez camelCase pour les m√©thodes et variables",
            "Commentez les m√©thodes publiques avec JavaDoc"
        ])
    
    elif language == "javascript":
        if 'var ' in code:
            analysis["suggestions"].append("üí° Pr√©f√©rez 'let' ou 'const' √† 'var' pour une meilleure port√©e des variables.")
        
        analysis["good_practices"].extend([
            "Utilisez 'const' par d√©faut, 'let' si n√©cessaire",
            "Utilisez les fonctions fl√©ch√©es pour plus de concision",
            "Activez le mode strict avec 'use strict'"
        ])
    
    # Score de qualit√© simple
    issues_count = len(analysis["issues"])
    if issues_count == 0:
        analysis["quality_score"] = "‚úÖ Excellent"
    elif issues_count <= 2:
        analysis["quality_score"] = "üëç Bon"
    else:
        analysis["quality_score"] = "‚ö†Ô∏è N√©cessite des am√©liorations"
    
    return analysis

async def debug_helper(error_message: str, context: str = "") -> Dict[str, Any]:
    """
    Aide au d√©bogage bas√©e sur le message d'erreur
    """
    
    error_lower = error_message.lower()
    
    solutions = []
    error_type = "Erreur g√©n√©rale"
    
    # D√©tection des erreurs courantes
    if "syntaxerror" in error_lower or "syntax error" in error_lower:
        error_type = "Erreur de syntaxe"
        solutions = [
            "V√©rifiez les parenth√®ses, crochets et accolades (doivent √™tre bien ferm√©s)",
            "V√©rifiez les guillemets (simples ou doubles bien ferm√©s)",
            "V√©rifiez l'indentation (particuli√®rement en Python)",
            "Recherchez les virgules manquantes dans les listes ou param√®tres"
        ]
    
    elif "indentation" in error_lower:
        error_type = "Erreur d'indentation"
        solutions = [
            "Utilisez des espaces de mani√®re coh√©rente (4 espaces recommand√©s en Python)",
            "Ne m√©langez pas tabulations et espaces",
            "V√©rifiez que tous les blocs sont correctement indent√©s",
            "Utilisez un √©diteur qui affiche les caract√®res invisibles"
        ]
    
    elif "nameerror" in error_lower or "not defined" in error_lower:
        error_type = "Variable non d√©finie"
        solutions = [
            "V√©rifiez l'orthographe de la variable",
            "Assurez-vous que la variable est d√©finie avant son utilisation",
            "V√©rifiez la port√©e (scope) de la variable",
            "Importez le module si c'est une fonction externe"
        ]
    
    elif "typeerror" in error_lower:
        error_type = "Erreur de type"
        solutions = [
            "V√©rifiez les types des variables utilis√©es",
            "Convertissez les types si n√©cessaire (int(), str(), float())",
            "V√©rifiez le nombre de param√®tres pass√©s √† une fonction",
            "Assurez-vous que l'objet supporte l'op√©ration demand√©e"
        ]
    
    elif "indexerror" in error_lower or "out of range" in error_lower:
        error_type = "Index hors limites"
        solutions = [
            "V√©rifiez que l'index est dans les limites de la liste (0 √† len(liste)-1)",
            "V√©rifiez que la liste n'est pas vide avant d'y acc√©der",
            "Utilisez len() pour conna√Ætre la taille de la liste",
            "Utilisez des boucles avec range(len(liste)) pour √©viter les d√©bordements"
        ]
    
    elif "keyerror" in error_lower:
        error_type = "Cl√© inexistante"
        solutions = [
            "V√©rifiez que la cl√© existe dans le dictionnaire",
            "Utilisez .get() avec une valeur par d√©faut: dict.get('cle', 'defaut')",
            "V√©rifiez l'orthographe de la cl√©",
            "Utilisez 'if cle in dict:' pour v√©rifier l'existence"
        ]
    
    elif "attributeerror" in error_lower:
        error_type = "Attribut inexistant"
        solutions = [
            "V√©rifiez que l'objet poss√®de cet attribut/m√©thode",
            "V√©rifiez l'orthographe de l'attribut",
            "Assurez-vous que l'objet est du bon type",
            "Consultez la documentation de la classe"
        ]
    
    elif "importerror" in error_lower or "modulenotfounderror" in error_lower:
        error_type = "Module introuvable"
        solutions = [
            "Installez le module avec: pip install nom_module",
            "V√©rifiez l'orthographe du nom du module",
            "Assurez-vous d'√™tre dans le bon environnement virtuel",
            "V√©rifiez que le fichier existe si c'est un module local"
        ]
    
    else:
        solutions = [
            "Lisez attentivement le message d'erreur complet",
            "Recherchez le message d'erreur sur Google ou Stack Overflow",
            "Consultez la documentation officielle",
            "Testez avec des print() pour d√©boguer √©tape par √©tape",
            "Utilisez un d√©bogueur (debugger) pour examiner l'√©tat du programme"
        ]
    
    return {
        "success": True,
        "error_type": error_type,
        "original_error": error_message,
        "context": context if context else "Aucun contexte fourni",
        "solutions": solutions,
        "tips": [
            "üîç Lisez toujours l'erreur de bas en haut (la derni√®re ligne est souvent la plus importante)",
            "üí° Le num√©ro de ligne indiqu√© pointe souvent vers l'erreur ou juste apr√®s",
            "üìö Consultez le wiki pour des exemples de r√©solution d'erreurs courantes"
        ]
    }